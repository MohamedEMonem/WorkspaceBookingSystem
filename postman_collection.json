{
  "info": {
    "name": "Workspace Booking System - User API",
    "description": "Complete API testing collection for User management with JWT authentication and token blacklisting",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_key",
      "value": "adminy(g@{LNR=pPvV/\"vo*`<g(,kwat$KOTrX_&7?@.B=|r|~f=mET5qxzpV_!MqLY[O`apd-5Xh9!4NZNN>+L0Rp@dEaLg3Eq^3pH2!(H^v4_%\"1h}0oU9p2g333+0\"oo$]I`0bv0dTtd&X_tmzc]m]qu$0^o9kE>@Z3E{Piln+_ij1Q00[Gj^_oipNL`Qtn2++ela;*u&RASlvj@d{H<$JDg@A@gLx-EcOytMb_xY=`h^hHlb9yus<d1]zzsxC@D6x",
      "type": "string"
    },
    {
      "key": "user2_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user2_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication",
      "item": [
        {
          "name": "1.1 Sign Up Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('admin_token', response.token);",
                  "    pm.collectionVariables.set('admin_id', response.user.id);",
                  "    console.log('Admin token saved:', response.token);",
                  "    pm.test('Admin user created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.user.role).to.eql('admin');",
                  "    });",
                  "} else {",
                  "    pm.test('Admin creation failed as expected', function () {",
                  "        pm.response.to.have.status(400);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@test.com\",\n  \"phone\": \"12345678901\",\n  \"gender\": \"male\",\n  \"birthday\": \"1990-01-01\",\n  \"role\": \"admin\",\n  \"password\": \"admin123\",\n  \"adminKey\": \"{{admin_key}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "1.2 Sign Up Regular User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "    console.log('User token saved:', response.token);",
                  "    pm.test('Regular user created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.user.role).to.eql('user');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@test.com\",\n  \"phone\": \"09876543210\",\n  \"gender\": \"male\",\n  \"birthday\": \"1995-05-15\",\n  \"role\": \"user\",\n  \"password\": \"user123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "1.3 Sign Up Second User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('user2_token', response.token);",
                  "    pm.collectionVariables.set('user2_id', response.user.id);",
                  "    console.log('User2 token saved:', response.token);",
                  "    pm.test('Second user created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.user.role).to.eql('user');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Smith\",\n  \"email\": \"jane@test.com\",\n  \"phone\": \"01234567890\",\n  \"gender\": \"female\",\n  \"birthday\": \"1992-03-20\",\n  \"role\": \"user\",\n  \"password\": \"jane123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "1.4 Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('admin_token', response.token);",
                  "    console.log('Admin logged in, token updated');",
                  "    pm.test('Admin login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.token).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/login",
              "host": ["{{base_url}}"],
              "path": ["users", "login"]
            }
          }
        },
        {
          "name": "1.5 Login Regular User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    console.log('User logged in, token updated');",
                  "    pm.test('User login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.token).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@test.com\",\n  \"password\": \"user123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/login",
              "host": ["{{base_url}}"],
              "path": ["users", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "2. User Profile Management",
      "item": [
        {
          "name": "2.1 Get Current User (Me)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get current user successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('role');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": ["{{base_url}}"],
              "path": ["users", "me"]
            }
          }
        },
        {
          "name": "2.2 Get User by ID (Self)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get user by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "2.3 Update User Profile (PUT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Update user profile successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.name).to.eql('John Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Updated\",\n  \"phone\": \"09876543211\",\n  \"gender\": \"male\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "2.4 Update User Profile (PATCH)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Patch user profile successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.name).to.eql('John Patched');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Patched\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Admin Operations",
      "item": [
        {
          "name": "3.1 Get All Users (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can get all users', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.users).to.be.an('array');",
                  "    pm.expect(response.count).to.be.above(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "3.2 Get Any User by ID (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can get any user by ID', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "3.3 Update User Role (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can update user role', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.role).to.eql('owner');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"owner\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Token Management",
      "item": [
        {
          "name": "4.1 Logout (Blacklist Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('logged out');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/logout",
              "host": ["{{base_url}}"],
              "path": ["users", "logout"]
            }
          }
        },
        {
          "name": "4.2 Logout All Devices (Self)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout all devices successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('devices');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{user2_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/logout-all",
              "host": ["{{base_url}}"],
              "path": ["users", "logout-all"]
            }
          }
        },
        {
          "name": "4.3 Logout All Devices for User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can logout user from all devices', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('devices');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/logout-all/{{user2_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "logout-all", "{{user2_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Admin Token Management",
      "item": [
        {
          "name": "5.1 Get Token Statistics (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can get token statistics', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.stats).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/admin/token-stats",
              "host": ["{{base_url}}"],
              "path": ["users", "admin", "token-stats"]
            }
          }
        },
        {
          "name": "5.2 Cleanup Expired Tokens (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can cleanup expired tokens', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.deletedCount).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/admin/cleanup-tokens",
              "host": ["{{base_url}}"],
              "path": ["users", "admin", "cleanup-tokens"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Authorization Testing",
      "item": [
        {
          "name": "6.1 User Access Admin Endpoint (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User cannot access admin endpoint', function () {",
                  "    pm.response.to.have.status(403);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('Access denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{user2_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "6.2 Access with No Token (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('No token access denied', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": ["{{base_url}}"],
              "path": ["users", "me"]
            }
          }
        },
        {
          "name": "6.3 Access with Invalid Token (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid token access denied', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('Invalid token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid_token_here",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": ["{{base_url}}"],
              "path": ["users", "me"]
            }
          }
        },
        {
          "name": "6.4 Access Other User's Data (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User cannot access other user data', function () {",
                  "    pm.response.to.have.status(403);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('Access denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{user2_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{admin_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{admin_id}}"]
            }
          }
        },
        {
          "name": "6.5 User Try to Change Role (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User cannot change role', function () {",
                  "    pm.response.to.have.status(403);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('admin');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{user2_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user2_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user2_id}}"]
            }
          }
        },
        {
          "name": "6.6 User Try Admin Logout All (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User cannot logout others from all devices', function () {",
                  "    pm.response.to.have.status(403);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('Admin required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{user2_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/logout-all/{{admin_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "logout-all", "{{admin_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Blacklisted Token Testing",
      "item": [
        {
          "name": "7.1 Use Token After Logout (Should Fail)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This request should be run after logout to test blacklisted token",
                  "console.log('Testing blacklisted token:', pm.collectionVariables.get('jwt_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Blacklisted token access denied', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": ["{{base_url}}"],
              "path": ["users", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "8. CRUD Operations Testing",
      "item": [
        {
          "name": "8.1 Create Owner User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('owner_id', response.user.id);",
                  "    pm.test('Owner user created successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.user.role).to.eql('owner');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Owner User\",\n  \"email\": \"owner@test.com\",\n  \"phone\": \"11111111111\",\n  \"gender\": \"female\",\n  \"birthday\": \"1988-12-25\",\n  \"role\": \"owner\",\n  \"password\": \"owner123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "8.2 Delete Owner User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin can delete user', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{owner_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{owner_id}}"]
            }
          }
        },
        {
          "name": "8.3 Try to Access Deleted User (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Deleted user not found', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{owner_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{owner_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "9. Validation Testing",
      "item": [
        {
          "name": "9.1 Invalid Email Format (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid email format rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"invalid-email\",\n  \"phone\": \"12345678900\",\n  \"gender\": \"male\",\n  \"birthday\": \"1990-01-01\",\n  \"role\": \"user\",\n  \"password\": \"test123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "9.2 Short Password (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Short password rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('6 characters');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"phone\": \"12345678900\",\n  \"gender\": \"male\",\n  \"birthday\": \"1990-01-01\",\n  \"role\": \"user\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "9.3 Invalid Phone Format (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid phone format rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('phone');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test2@example.com\",\n  \"phone\": \"123\",\n  \"gender\": \"male\",\n  \"birthday\": \"1990-01-01\",\n  \"role\": \"user\",\n  \"password\": \"test123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        },
        {
          "name": "9.4 Duplicate Email (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Duplicate email rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"admin@test.com\",\n  \"phone\": \"12345678909\",\n  \"gender\": \"male\",\n  \"birthday\": \"1990-01-01\",\n  \"role\": \"user\",\n  \"password\": \"test123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/signup",
              "host": ["{{base_url}}"],
              "path": ["users", "signup"]
            }
          }
        }
      ]
    }
  ]
}
